/* DoomDef.h */

#define VINT    int

/* ULTRA64 LIBRARIES */
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdint.h>

/*-----------*/
/* SYSTEM IO */
/*-----------*/
#define SCREEN_HT   240
#define SCREEN_WD   320

extern uint32_t cfb[2][SCREEN_WD*SCREEN_HT]; // 8036A000

typedef unsigned char byte;

/*=============== */
/*   TYPES */
/*=============== */

typedef struct
{
    char        identification[4];      /* should be IWAD */
    int         numlumps;
    int         infotableofs;
} wadinfo_t;

/*============================================================================= */

/* Fixes and Version Update Here*/

// NEWS Updates
#define ENABLE_NIGHTMARE    1       // Originally Activated in the project [GEC] Master Edition.

// FIXES
#define FIX_LINEDEFS_DELETION   1   // Fixes for the 'linedef deletion' bug. From PsyDoom

/*============================================================================= */

/* all external data is defined here */
#include "doomdata.h"

/* header generated by multigen utility */
#include "doominfo.h"//"info.h"

#define MAXCHAR ((char)0x7f)
#define MAXSHORT ((short)0x7fff)
#define MAXINT  ((int)0x7fffffff)   /* max pos 32-bit int */
#define MAXLONG ((long)0x7fffffff)

#define MINCHAR ((char)0x80)
#define MINSHORT ((short)0x8000)
#define MININT  ((int)0x80000000)   /* max negative 32-bit integer */
#define MINLONG ((long)0x80000000)

#ifndef NULL
#define NULL    0
#endif

int D_vsprintf(char *string, const char *format, int *argptr);

/* c_convert.c  */
void LightGetHSV(int r,int g,int b,int *h,int *s,int *v); // 800020BC
void LightGetRGB(int h,int s,int v,int *r,int *g,int *b); // 8000248C

/*
===============================================================================

                        GLOBAL TYPES

===============================================================================
*/

#define MAXPLAYERS  1           /* D64 has one player */
#define TICRATE     30          /* number of tics / second */

#define FRACBITS        16
#define FRACUNIT        (1<<FRACBITS)

typedef int fixed_t;

#define ANG45   0x20000000
#define ANG90   0x40000000
#define ANG180  0x80000000
#define ANG270  0xc0000000
#define ANG5    0x38e0000   // (ANG90/18)
#define ANG1    0xb60000    // (ANG45/45)
typedef unsigned angle_t;

#define FINEANGLES          8192
#define FINEMASK            (FINEANGLES-1)
#define ANGLETOFINESHIFT    19  /* 0x100000000 to 0x2000 */

extern  fixed_t     finesine[5*FINEANGLES/4];
extern  fixed_t     *finecosine;

typedef enum
{
    sk_baby,
    sk_easy,
    sk_medium,
    sk_hard,
    sk_nightmare
} skill_t;

typedef enum
{
    ga_nothing,
    ga_died,
    ga_completed,
    ga_secretexit,// no used
    ga_warped,
    ga_exitdemo,
    //News
    //ga_recorddemo,// no used
    ga_timeout,
    ga_restart,
    ga_exit
} gameaction_t;

#define LASTLEVEL 34
#define TOTALMAPS 33

/*
===============================================================================

                    GLOBAL FUNCTIONS

===============================================================================
*/

fixed_t FixedMul (fixed_t a, fixed_t b);
fixed_t FixedDiv (fixed_t a, fixed_t b);
fixed_t FixedDiv2(fixed_t a, fixed_t b);

//extern fixed_t FixedMul2 (fixed_t a, fixed_t b);// ASM MIPS CODE
//extern fixed_t FixedDiv3 (fixed_t a, fixed_t b);// ASM MIPS CODE

/*----------- */
/*MEMORY ZONE */
/*----------- */
/* tags < 8 are not overwritten until freed */
#define PU_STATIC       1           /* static entire execution time */
#define PU_LEVEL        2           /* static until level exited */
#define PU_LEVSPEC      4           /* a special thinker in a level */
/* tags >= 8 are purgable whenever needed */
#define PU_PURGELEVEL   8
#define PU_CACHE        16

#define ZONEID  0x1d4a

typedef struct memblock_s
{
    int     size;           /* including the header and possibly tiny fragments */
    void    **user;         /* NULL if a free block */
    int     tag;            /* purgelevel */
    int     id;             /* should be ZONEID */
    int     lockframe;      /* don't purge on the same frame */
    struct memblock_s   *next;
    struct memblock_s   *prev;
    void    *gfxcache;      /* New on Doom64 */
} memblock_t;

typedef struct
{
    int     size;               /* total bytes malloced, including header */
    memblock_t  *rover;
    memblock_t  *rover2;        /* New on Doom64 */
    memblock_t  *rover3;        /* New on Doom64 */
    memblock_t  blocklist;      /* start / end cap for linked list */
} memzone_t;

extern  memzone_t   *mainzone;

void    Z_Init (void);
memzone_t *Z_InitZone (byte *base, int size);

void    Z_SetAllocBase(memzone_t *mainzone);
void    *Z_Malloc2 (memzone_t *mainzone, int size, int tag, void *ptr);
void    *Z_Alloc2(memzone_t *mainzone, int size, int tag, void *user); // PsxDoom / Doom64
void    Z_Free2 (memzone_t *mainzone,void *ptr);

#define Z_Malloc(x,y,z) Z_Malloc2(mainzone,x,y,z)
#define Z_Alloc(x,y,z) Z_Alloc2(mainzone,x,y,z)
#define Z_Free(x) Z_Free2(mainzone,x)

void    Z_FreeTags(memzone_t *mainzone, int tag);
void    Z_Touch(void *ptr);
void    Z_CheckZone (memzone_t *mainzone);
void    Z_ChangeTag (void *ptr, int tag);
int     Z_FreeMemory (memzone_t *mainzone);
void    Z_DumpHeap(memzone_t *mainzone);

/*------- */
/*WADFILE */
/*------- */

// New Doom64
typedef enum
{
    dec_none,
    dec_jag,
    dec_d64
} decodetype;

typedef struct
{
    int         filepos;                    /* also texture_t * for comp lumps */
    int         size;
    char        name[8];
} lumpinfo_t;

typedef struct {
    void       *cache;
} lumpcache_t;

//extern    lumpinfo_t  *lumpinfo;      /* points directly to rom image */
//extern    int         numlumps;
//extern    lumpcache_t *lumpcache;
//extern    byte        *mapfileptr;    // psxdoom/d64
//extern    int         mapnumlumps;    // psxdoom/d64
//extern    lumpinfo_t  *maplump;       // psxdoom/d64

void    W_Init (void);

int     W_CheckNumForName (char *name, int hibit1, int hibit2);
int     W_GetNumForName (char *name);

int     W_LumpLength (int lump);
void    W_ReadLump (int lump, void *dest, decodetype dectype);

void    *W_CacheLumpNum (int lump, int tag, decodetype dectype);
void    *W_CacheLumpName (char *name, int tag, decodetype dectype);

void    W_OpenMapWad(int mapnum);
void    W_FreeMapLump(void);
int     W_MapLumpLength(int lump);
int     W_MapGetNumForName(char *name);
void    *W_GetMapLump(int lump);

/*---------*/
/* DECODES */
/*---------*/
void    DecodeD64(unsigned char *input, unsigned char *output);
void    DecodeJaguar(unsigned char *input, unsigned char *output);

typedef struct
{
    short compressed;
    short numpal;
    short width;
    short height;
} gfxN64_t;

typedef struct
{
    short id;
    short numpal;
    short wshift;
    short hshift;
} textureN64_t;

typedef struct
{
    unsigned short  tiles;      // 0
    short           compressed; // 2
    unsigned short  cmpsize;    // 4
    short           xoffs;      // 6
    short           yoffs;      // 8
    unsigned short  width;      // 10
    unsigned short  height;     // 12
    unsigned short  tileheight; // 14
} spriteN64_t;
